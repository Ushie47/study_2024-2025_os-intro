<h1 id="лаборатория-2"><strong>лаборатория 2</strong></h1>
<p><strong>David Michael Francis</strong></p>
<h2 id="цель-работы">цель работы</h2>
<p><strong>Изучить идеологию и применение средств контроля
версий.</strong> <strong>Освоить умения по работе с git.</strong></p>
<h3 id="описание-задачи"><strong>Описание задачи</strong></h3>
<p>1.<em>во-первых, я установил git и gh, используя команды dnf install
git и dnf install gh</em></p>
<figure>
<img src="images/Screenshot1.png" alt="во-первых" />
<figcaption aria-hidden="true">во-первых</figcaption>
</figure>
<p>2.<em>Я ввел свое имя и адрес электронной почты. Затем я настроил
utf-8 в выходных данных git-сообщений. Я настроил проверку и подписание
git-коммита.Я также создал ssh-ключ</em></p>
<figure>
<img src="images/Screenshot2.png" alt="Screenshot 2" />
<figcaption aria-hidden="true">Screenshot 2</figcaption>
</figure>
<p>3.<em>Я сгенерировал ключ pgp, используя команду gpg
–full-generate-key.</em></p>
<figure>
<img src="images/Screenshot3.png" alt="Screenshot 3" />
<figcaption aria-hidden="true">Screenshot 3</figcaption>
</figure>
<p>4.<em>Я добавил ключ pgp на github</em></p>
<figure>
<img src="images/Screenshot4.png" alt="SCreenshot 4" />
<figcaption aria-hidden="true">SCreenshot 4</figcaption>
</figure>
<figure>
<img src="images/Screenshot5.png" alt="Screenshot 5" />
<figcaption aria-hidden="true">Screenshot 5</figcaption>
</figure>
<figure>
<img src="images/Screenshot6.png" alt="SCreenshot 6" />
<figcaption aria-hidden="true">SCreenshot 6</figcaption>
</figure>
<p>5.<em>Настройка подписей автоматической фиксации git</em> git config
–global user.signingkey <PGP Fingerprint> git config –global
commit.gpgsign true git config –global gpg.program $(which gpg2)</p>
<figure>
<img src="images/Screenshot7.png" alt="Screenshot 7" />
<figcaption aria-hidden="true">Screenshot 7</figcaption>
</figure>
<p>6.<em>Настройка каталога курсов</em></p>
<figure>
<img src="images/Screenshot8.png" alt="Screenshot 8" />
<figcaption aria-hidden="true">Screenshot 8</figcaption>
</figure>
<p><strong>Выход:</strong>В этой лабораторной работе мы проверили, как
использовать git. Создаем репозитории и клонируем их. Как создать ssh- и
pgn-ключи. А также как извлекать и отправлять в github</p>
<h4 id="ответы-на-контрольные-вопросы">Ответы на контрольные
вопросы</h4>
<p>1.Что такое системы контроля версий (VCS) и для решения каких задач
они предназначаются? <em>Системы контроля версий (VCS) отслеживают
изменения в файлах, позволяя нескольким людям сотрудничать, вести
историю и возвращаться к предыдущим версиям. Они решают такие проблемы,
как случайная потеря данных, конфликты кода и отслеживание
изменений.</em></p>
<p>2.Объясните следующие понятия VCS и их отношения: хранилище, commit,
история, рабочая копия.</p>
<p><em>Хранилище: Центральное место, где хранятся все версии
файлов.</em> <em>Фиксация: моментальный снимок изменений, сохраненных в
репозитории.</em> <em>История: Запись коммитов, показывающая прошлые
изменения.</em> <em>Рабочая копия: локальная версия файлов, изменяемых
пользователем.</em></p>
<p>3.Что представляют собой и чем отличаются централизованные и
децентрализованные VCS? Приведите примеры VCS каждого вида.</p>
<p><em>Централизованная система контроля версий (CVCS): Все изменения
хранятся в едином центральном репозитории. Пример: Subversion (SVN),
Perforce.</em> <em>Децентрализованная система контроля версий (DVCS): У
каждого пользователя есть полная копия репозитория, что позволяет
работать в автономном режиме. Пример: Git, Mercurial.</em></p>
<p>4.Действия VCS при работе с хранилищем в одиночку</p>
<p><em>Инициализируйте репозиторий.</em> <em>Вносите изменения и
фиксируйте их.</em> <em>Просмотрите историю и при необходимости
вернитесь к ней.</em></p>
<p>5.Работа с VCS Shared Storage</p>
<p><em>Clone/pull the latest version.</em> <em>Make changes and commit
them locally.</em> <em>Push changes to the shared repository.</em>
<em>Resolve conflicts if necessary.</em></p>
<p>6.Основные задачи, решаемые Git</p>
<p><em>Отслеживание изменений</em> <em>Совместная работа и слияние</em>
<em>Ветвление для параллельной разработки</em> <em>Откат версии</em></p>
<p>7.Команды Git и их роли</p>
<p><em>Developers: Write and commit code.</em> <em>Maintainers: Review
and merge changes.</em> <em>Release Managers: Manage versions and
releases.</em></p>
<p>8.Использование локальных и удаленных репозиториев - Локальный
репозиторий:</p>
<pre><code>git init  
git add .  
git commit -m &quot;Initial commit&quot;</code></pre>
<ul>
<li>Удаленный репозиторий:</li>
</ul>
<pre><code>git remote add origin &lt;repo_url&gt;  
git push origin main  
git pull origin main  </code></pre>
<p>9.Ветви и их назначение: Ветки позволяют вести параллельную
разработку, не затрагивая основную кодовую базу.</p>
<pre><code>git branch feature-branch  
git checkout feature-branch  </code></pre>
<p>10.Игнорирование файлов в Git</p>
<pre><code>node_modules/  
*.log</code></pre>
<p>This prevents unnecessary files from being committed.</p>
